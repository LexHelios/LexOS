services:
  python-agent-team-service:
    build:
      context: ./lexos_deployment_package/agent-team-service
    container_name: python-agent-team-service
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in agent-team-service
    # Exposes FastAPI default port
    ports:
      - "8000:8000"

  python-agent-scripts:
    build:
      context: ./lexos_deployment_package/agent-scripts
    container_name: python-agent-scripts
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in agent-scripts
    # Exposes Uvicorn/Gunicorn port
    ports:
      - "8009:8009"

  python-ai-orchestrator:
    build:
      context: ./ai-orchestrator
    container_name: python-ai-orchestrator
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in ai-orchestrator

  python-analytics-service:
    build:
      context: ./analytics-service
    container_name: python-analytics-service
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in analytics-service

  python-digital-twin-service:
    build:
      context: ./digital-twin-service
    container_name: python-digital-twin-service
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in digital-twin-service

  python-gis-service:
    build:
      context: ./gis-service
    container_name: python-gis-service
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in gis-service

  python-llm-service:
    build:
      context: ./llm-service
    container_name: python-llm-service
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in llm-service

  python-oracle-service:
    build:
      context: ./oracle-service
    container_name: python-oracle-service
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in oracle-service

  python-voice-orchestrator:
    build:
      context: ./voice-orchestrator
    container_name: python-voice-orchestrator
    restart: unless-stopped
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in voice-orchestrator

  typescript-src:
    build:
      context: ./src
    container_name: typescript-src
    restart: unless-stopped
    init: true
    networks:
      - lexos-net
    # env_file: ./.env  # Uncomment if .env file exists in src
    # Exposes default Node.js port
    ports:
      - "3000:3000"

  # External services required by the stack
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    networks:
      - lexos-net
    environment:
      POSTGRES_USER: lexos_user
      POSTGRES_PASSWORD: your_secure_password_here  # Set in .env or override
      POSTGRES_DB: lexos_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lexos_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    networks:
      - lexos-net
    command: ["redis-server", "--requirepass", "your_redis_password_here"]  # Set in .env or override
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data

networks:
  lexos-net:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
