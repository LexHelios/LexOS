services:
  python-backend:
    build:
      context: ./backend
    container_name: python-backend
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./backend
    depends_on:
      - postgres
      - redis
    networks:
      - lexos-net
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3

  typescript-frontend:
    build:
      context: ./frontend
    container_name: typescript-frontend
    restart: unless-stopped
    init: true
    # env_file: ./.env  # Uncomment if .env file exists in ./frontend
    networks:
      - lexos-net
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 3s

  python-agent-team-service:
    build:
      context: ./lexos_deployment_package/agent-team-service
    container_name: python-agent-team-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./lexos_deployment_package/agent-team-service
    depends_on:
      - postgres
      - redis
    networks:
      - lexos-net
    expose:
      - "8000"

  python-ai-orchestrator:
    build:
      context: ./ai-orchestrator
    container_name: python-ai-orchestrator
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./ai-orchestrator
    networks:
      - lexos-net
    expose:
      - "8000"

  python-analytics-service:
    build:
      context: ./analytics-service
    container_name: python-analytics-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./analytics-service
    networks:
      - lexos-net
    expose:
      - "8000"

  python-digital-twin-service:
    build:
      context: ./digital-twin-service
    container_name: python-digital-twin-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./digital-twin-service
    networks:
      - lexos-net
    expose:
      - "8000"

  python-gis-service:
    build:
      context: ./gis-service
    container_name: python-gis-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./gis-service
    networks:
      - lexos-net
    expose:
      - "8000"

  python-llm-service:
    build:
      context: ./llm-service
    container_name: python-llm-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./llm-service
    networks:
      - lexos-net
    expose:
      - "8000"

  python-oracle-service:
    build:
      context: ./oracle-service
    container_name: python-oracle-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./oracle-service
    networks:
      - lexos-net
    expose:
      - "8000"

  python-vision-service:
    build:
      context: ./vision-service
    container_name: python-vision-service
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./vision-service
    networks:
      - lexos-net
    expose:
      - "8000"

  python-voice-orchestrator:
    build:
      context: ./voice-orchestrator
    container_name: python-voice-orchestrator
    restart: unless-stopped
    # env_file: ./.env  # Uncomment if .env file exists in ./voice-orchestrator
    networks:
      - lexos-net
    expose:
      - "8000"

  typescript-src:
    build:
      context: ./src
    container_name: typescript-src
    restart: unless-stopped
    init: true
    # env_file: ./.env  # Uncomment if .env file exists in ./src
    networks:
      - lexos-net
    expose:
      - "3000"

  # External dependencies
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: lexos_user
      POSTGRES_PASSWORD: your_secure_password_here  # Change in production
      POSTGRES_DB: lexos_db
    networks:
      - lexos-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lexos_user"]
      interval: 30s
      timeout: 5s
      retries: 5
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data  # Uncomment to persist data

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "your_redis_password_here"]  # Change in production
    networks:
      - lexos-net
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    # volumes:
    #   - redis_data:/data  # Uncomment to persist data

# Networks
networks:
  lexos-net:
    driver: bridge

# Uncomment the following if you want to persist database/cache data
#volumes:
#  postgres_data:
#  redis_data:
