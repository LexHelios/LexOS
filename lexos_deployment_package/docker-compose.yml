version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"
    compress: "true"
    labels: "lexos"
    env: "prod"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: lexos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${LEXOS_BACKUP_DIR}/postgres:/backups
    networks:
      - lexos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} && pg_stat_statements_reset()"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Redis for caching and queues
  redis:
    image: redis:7
    container_name: lexos-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
      - ${LEXOS_BACKUP_DIR}/redis:/backups
    networks:
      - lexos-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # LexOS API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - API_VERSION=${API_VERSION}
    container_name: lexos-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${DB_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - PROMETHEUS_METRICS=true
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - AUDIO_DEVICE=${AUDIO_DEVICE}
      - SAMPLE_RATE=${SAMPLE_RATE}
      - BUFFER_SIZE=${BUFFER_SIZE}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - ${LEXOS_DATA_DIR}/audio:/audio
      - ${LEXOS_DATA_DIR}/models:/models
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 0
        order: stop-first
    security_opt:
      - no-new-privileges:true
    devices:
      - ${AUDIO_DEVICE}:/dev/snd
    runtime: nvidia

  # LexOS Web Frontend
  web:
    build:
      context: ./web-content
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - WEB_VERSION=${WEB_VERSION}
    container_name: lexos-web
    restart: unless-stopped
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    security_opt:
      - no-new-privileges:true

  # Nginx for reverse proxy
  nginx:
    image: nginx:latest
    container_name: lexos-nginx
    restart: unless-stopped
    depends_on:
      - api
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${LEXOS_CONFIG_DIR}/nginx:/etc/nginx/conf.d
      - ${LEXOS_LOGS_DIR}/nginx:/var/log/nginx
      - ${LEXOS_DATA_DIR}/ssl:/etc/ssl/lexos
      - ${LEXOS_DATA_DIR}/web_html:/usr/share/nginx/html
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # DJ Agent with GPU support
  dj-agent:
    build:
      context: ./agent-scripts
      dockerfile: Dockerfile.dj
      args:
        - BUILD_ENV=production
        - AGENT_VERSION=${AGENT_VERSION}
    container_name: lexos-dj-agent
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/audio:/audio
      - ${LEXOS_DATA_DIR}/models:/models
      - ${LEXOS_CONFIG_DIR}/dj:/config
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - AUDIO_DEVICE=${AUDIO_DEVICE}
      - SAMPLE_RATE=${SAMPLE_RATE}
      - BUFFER_SIZE=${BUFFER_SIZE}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    devices:
      - ${AUDIO_DEVICE}:/dev/snd
    runtime: nvidia

  # DevOps Agent
  devops-agent:
    build:
      context: ./agent-scripts
      dockerfile: Dockerfile.devops
      args:
        - BUILD_ENV=production
        - AGENT_VERSION=${AGENT_VERSION}
    container_name: lexos-devops-agent
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/models:/models
      - ${LEXOS_CONFIG_DIR}/devops:/config
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # QA Agent
  qa-agent:
    build:
      context: ./agent-scripts
      dockerfile: Dockerfile.qa
      args:
        - BUILD_ENV=production
        - AGENT_VERSION=${AGENT_VERSION}
    container_name: lexos-qa-agent
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/models:/models
      - ${LEXOS_CONFIG_DIR}/qa:/config
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # Maintenance Agent
  maintenance-agent:
    build:
      context: ./agent-scripts
      dockerfile: Dockerfile.maintenance
      args:
        - BUILD_ENV=production
        - AGENT_VERSION=${AGENT_VERSION}
    container_name: lexos-maintenance-agent
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/models:/models
      - ${LEXOS_CONFIG_DIR}/maintenance:/config
      - ${LEXOS_BACKUP_DIR}:/backups
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # GIS Service
  gis:
    build:
      context: ./gis-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - GIS_VERSION=${GIS_VERSION}
    container_name: lexos-gis
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/gis:/data
      - ${LEXOS_CONFIG_DIR}/gis:/config
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    security_opt:
      - no-new-privileges:true

  # Financial Analysis Service
  financial:
    build:
      context: ./financial-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - FINANCIAL_VERSION=${FINANCIAL_VERSION}
    container_name: lexos-financial
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/financial:/data
      - ${LEXOS_CONFIG_DIR}/financial:/config
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    security_opt:
      - no-new-privileges:true

  # Social Network Analysis Service
  social-network:
    build:
      context: ./social-network-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - SOCIAL_VERSION=${SOCIAL_VERSION}
    container_name: lexos-social-network
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/social:/data
      - ${LEXOS_CONFIG_DIR}/social:/config
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # Vault for secrets management
  vault:
    image: vault:latest
    container_name: lexos-vault
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/vault:/vault/data
      - ${LEXOS_CONFIG_DIR}/vault:/vault/config
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
      - VAULT_API_ADDR=http://127.0.0.1:8200
    ports:
      - "8200:8200"
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: lexos-prometheus
    restart: unless-stopped
    volumes:
      - ${LEXOS_CONFIG_DIR}/prometheus:/etc/prometheus
      - ${LEXOS_DATA_DIR}/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    container_name: lexos-grafana
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/grafana:/var/lib/grafana
      - ${LEXOS_CONFIG_DIR}/grafana:/etc/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Analytics Service
  analytics:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - ANALYTICS_VERSION=${ANALYTICS_VERSION}
    container_name: lexos-analytics
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/analytics:/data
      - ${LEXOS_CONFIG_DIR}/analytics:/config
      - ${LEXOS_DATA_DIR}/models:/models
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # AI Orchestrator Service
  ai-orchestrator:
    build:
      context: ./ai-orchestrator
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - ORCHESTRATOR_VERSION=${ORCHESTRATOR_VERSION}
    container_name: lexos-ai-orchestrator
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/ai:/data
      - ${LEXOS_CONFIG_DIR}/ai:/config
      - ${LEXOS_DATA_DIR}/models:/models
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - RAY_ADDRESS=auto
      - RAY_NAMESPACE=lexos
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # Vision Service
  vision:
    build:
      context: ./vision-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - VISION_VERSION=${VISION_VERSION}
    container_name: lexos-vision
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/vision:/data
      - ${LEXOS_CONFIG_DIR}/vision:/config
      - ${LEXOS_DATA_DIR}/models:/models
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  # Voice Orchestrator Service
  voice-orchestrator:
    build:
      context: ./voice-orchestrator
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - VOICE_VERSION=${VOICE_VERSION}
    container_name: lexos-voice-orchestrator
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/voice:/data
      - ${LEXOS_CONFIG_DIR}/voice:/config
      - ${LEXOS_DATA_DIR}/models:/models
      - /var/run/docker.sock:/var/run/docker.sock
      - ${KUBECONFIG}:/root/.kube/config
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    runtime: nvidia

  llm-service:
    build:
      context: ./llm-service
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
        - LLM_VERSION=1.0.0
    container_name: lexos-llm-service
    restart: unless-stopped
    volumes:
      - ./llm-service/data:/app/data
      - ./llm-service/config:/app/config
      - ./llm-service/models:/app/models
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CUDA_VISIBLE_DEVICES=all
      - NVIDIA_VISIBLE_DEVICES=all
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - REPLICATE_API_KEY=${REPLICATE_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    networks:
      - lexos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  digital-twin:
    build:
      context: ./digital-twin-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - TWIN_VERSION=1.0.0
    container_name: lexos-digital-twin
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/digital-twin:/app/data
      - ${LEXOS_CONFIG_DIR}/digital-twin:/app/config
      - ${LEXOS_DATA_DIR}/models:/app/models
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  oracle:
    build:
      context: ./oracle-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - ORACLE_VERSION=1.0.0
    container_name: lexos-oracle
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/oracle:/app/data
      - ${LEXOS_CONFIG_DIR}/oracle:/app/config
      - ${LEXOS_DATA_DIR}/models:/app/models
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - NEWS_API_KEY=${NEWS_API_KEY}
      - ALPHA_VANTAGE_KEY=${ALPHA_VANTAGE_KEY}
      - LEGAL_API_KEY=${LEGAL_API_KEY}
      - SOCIAL_API_KEY=${SOCIAL_API_KEY}
      - GEOPOLITICS_API_KEY=${GEOPOLITICS_API_KEY}
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  agent-team:
    build:
      context: ./agent-team-service
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - AGENT_VERSION=1.0.0
    container_name: lexos-agent-team
    restart: unless-stopped
    volumes:
      - ${LEXOS_DATA_DIR}/agent-team:/app/data
      - ${LEXOS_CONFIG_DIR}/agent-team:/app/config
      - ${LEXOS_DATA_DIR}/models:/app/models
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - RAY_ADDRESS=auto
      - RAY_NAMESPACE=lexos
    networks:
      - lexos-network
    healthcheck: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 32G
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${LEXOS_DATA_DIR}/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${LEXOS_DATA_DIR}/redis
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ${LEXOS_DATA_DIR}/prometheus
      o: bind
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: ${LEXOS_DATA_DIR}/grafana
      o: bind

networks:
  lexos-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: lexos0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
