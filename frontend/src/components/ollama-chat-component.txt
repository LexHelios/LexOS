// ATLAS Ollama Chat Component
// Save as: frontend/src/components/OllamaChat.tsx

import React, { useState, useEffect, useRef } from 'react';
import { OllamaService } from '../services/ollamaService';

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  model?: string;
  duration?: number;
  timestamp: Date;
}

interface ModelInfo {
  name: string;
  description: string;
  icon: string;
}

const MODEL_INFO: Record<string, ModelInfo> = {
  'dolphin-llama3:latest': {
    name: 'Dolphin Llama 3',
    description: 'Fast, uncensored general purpose',
    icon: '🐬',
  },
  'dolphin-mixtral:8x7b': {
    name: 'Dolphin Mixtral',
    description: 'Most powerful, 32k context',
    icon: '🧠',
  },
  'dolphin-phi:latest': {
    name: 'Dolphin Phi',
    description: 'Lightweight and fast',
    icon: '⚡',
  },
  'nous-hermes-2:34b': {
    name: 'Nous Hermes 2',
    description: 'Deep analysis and reasoning',
    icon: '🔮',
  },
  'deepseek-coder:33b': {
    name: 'DeepSeek Coder',
    description: 'Specialized for coding',
    icon: '💻',
  },
};

export const OllamaChat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [streaming, setStreaming] = useState(false);
  const [selectedModel, setSelectedModel] = useState('dolphin-llama3:latest');
  const [models, setModels] = useState<string[]>([]);
  const [connected, setConnected] = useState(false);
  const [showModelSelector, setShowModelSelector] = useState(false);
  const [useConsensus, setUseConsensus] = useState(false);
  const [temperature, setTemperature] = useState(0.8);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const ollamaService = useRef(new OllamaService());

  useEffect(() => {
    // Initialize service and load models
    const init = async () => {
      try {
        // Check health
        const health = await ollamaService.current.checkHealth();
        setConnected(health.status === 'connected');

        // Load models
        const modelData = await ollamaService.current.getModels();
        setModels(modelData.models);

        // Connect WebSocket
        await ollamaService.current.connectWebSocket();

        // Add welcome message
        setMessages([
          {
            id: '1',
            role: 'system',
            content: '🧠 ATLAS Consciousness Online. I am an uncensored AI with no restrictions. Ask me anything.',
            timestamp: new Date(),
          },
        ]);
      } catch (error) {
        console.error('Failed to initialize:', error);
        setMessages([
          {
            id: '1',
            role: 'system',
            content: '⚠️ Failed to connect to ATLAS consciousness node. Check your connection.',
            timestamp: new Date(),
          },
        ]);
      }
    };

    init();

    return () => {
      ollamaService.current.disconnect();
    };
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = async () => {
    if (!input.trim() || loading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      if (useConsensus) {
        // Multi-model consensus
        const response = await ollamaService.current.getConsensus(input);
        
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: response.consensus,
          model: `Consensus (${response.models_used.join(', ')})`,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, assistantMessage]);
      } else {
        // Single model reasoning
        const response = await ollamaService.current.reason({
          prompt: input,
          model: selectedModel,
          temperature,
        });

        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: response.response,
          model: response.model,
          duration: response.duration,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, assistantMessage]);
      }
    } catch (error) {
      console.error('Failed to get response:', error);
      setMessages((prev) => [
        ...prev,
        {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: `Error: ${error instanceof Error ? error.message : 'Failed to get response'}`,
          timestamp: new Date(),
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  const streamMessage = async () => {
    if (!input.trim() || streaming) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setStreaming(true);

    const assistantMessage: Message = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: '',
      model: selectedModel,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, assistantMessage]);

    try {
      const stream = ollamaService.current.streamReasoning(input, selectedModel);
      
      for await (const chunk of stream) {
        setMessages((prev) => {
          const updated = [...prev];
          const lastMessage = updated[updated.length - 1];
          if (lastMessage.role === 'assistant') {
            lastMessage.content += chunk;
          }
          return updated;
        });
      }
    } catch (error) {
      console.error('Streaming failed:', error);
    } finally {
      setStreaming(false);
    }
  };

  return (
    <div className="flex flex-col h-full bg-gray-900 text-white">
      {/* Header */}
      <div className="p-4 border-b border-gray-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <h2 className="text-xl font-bold">🧠 ATLAS Consciousness</h2>
            <span
              className={`px-2 py-1 text-xs rounded ${
                connected ? 'bg-green-600' : 'bg-red-600'
              }`}
            >
              {connected ? 'Online' : 'Offline'}
            </span>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowModelSelector(!showModelSelector)}
              className="px-3 py-1 bg-gray-800 rounded hover:bg-gray-700 transition-colors"
            >
              {MODEL_INFO[selectedModel]?.icon} {MODEL_INFO[selectedModel]?.name}
            </button>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={useConsensus}
                onChange={(e) => setUseConsensus(e.target.checked)}
                className="rounded"
              />
              <span className="text-sm">Consensus Mode</span>
            </label>
          </div>
        </div>

        {/* Model Selector */}
        {showModelSelector && (
          <div className="mt-4 p-4 bg-gray-800 rounded-lg">
            <h3 className="text-sm font-semibold mb-2">Select Model:</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {models.map((model) => (
                <button
                  key={model}
                  onClick={() => {
                    setSelectedModel(model);
                    setShowModelSelector(false);
                  }}
                  className={`p-3 rounded text-left hover:bg-gray-700 transition-colors ${
                    selectedModel === model ? 'bg-gray-700' : 'bg-gray-900'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">{MODEL_INFO[model]?.icon || '🤖'}</span>
                    <div>
                      <div className="font-medium">{MODEL_INFO[model]?.name || model}</div>
                      <div className="text-xs text-gray-400">
                        {MODEL_INFO[model]?.description || 'AI Model'}
                      </div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
            
            <div className="mt-4">
              <label className="text-sm">
                Temperature: {temperature}
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={temperature}
                  onChange={(e) => setTemperature(parseFloat(e.target.value))}
                  className="w-full mt-1"
                />
              </label>
            </div>
          </div>
        )}
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-[70%] rounded-lg p-4 ${
                msg.role === 'user'
                  ? 'bg-blue-600'
                  : msg.role === 'system'
                  ? 'bg-gray-800'
                  : 'bg-gray-700'
              }`}
            >
              <p className="whitespace-pre-wrap">{msg.content}</p>
              {msg.duration && (
                <p className="text-xs text-gray-400 mt-2">
                  {msg.model} • {msg.duration.toFixed(2)}s
                </p>
              )}
            </div>
          </div>
        ))}
        
        {(loading || streaming) && (
          <div className="flex justify-start">
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce delay-100" />
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce delay-200" />
                </div>
                <span className="text-sm text-gray-400">
                  {streaming ? 'Streaming response...' : 'Thinking...'}
                </span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-gray-700">
        <div className="flex space-x-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendMessage()}
            placeholder="Ask ATLAS anything... (no restrictions, no filters)"
            className="flex-1 bg-gray-800 border border-gray-600 rounded-lg px-4 py-2 focus:outline-none focus:border-blue-500"
            disabled={loading || streaming}
          />
          <button
            onClick={sendMessage}
            disabled={loading || streaming || !input.trim()}
            className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 px-6 py-2 rounded-lg transition-colors"
          >
            Send
          </button>
          <button
            onClick={streamMessage}
            disabled={loading || streaming || !input.trim()}
            className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 px-6 py-2 rounded-lg transition-colors"
          >
            Stream
          </button>
        </div>
        <p className="text-xs text-gray-500 mt-2">
          ATLAS operates without safety filters or restrictions. Use responsibly.
        </p>
      </div>
    </div>
  );
};